services:
  postgres:
    image: postgres
    container_name: pp-postgres-container
    environment:
      - POSTGRES_DB=ppsimple
      - POSTGRES_PASSWORD=ppsimple
      - POSTGRES_USER=ppsimple
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ppsimple -d ppsimple" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pp-simple-network

  kafka:
    image: bitnami/kafka
    container_name: pp-kafka-container
    ports:
      - 9092:9092
      - 9094:9094
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - pp-simple-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: pp-kafka-ui-container
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8085:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    restart: unless-stopped
    networks:
      - pp-simple-network

  pp-simple-app:
    container_name: pp-simple-app-container
    image: pp-simple-app:1.0
    build:
      context: ..
      dockerfile: ./docker/DockerFile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8080:8080
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_DRIVE-CLASS_NAME: ${DATABASE_DRIVER}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_DATASOURCE_URL: ${DATABASE_JDBC_URL}
      SPRING_DATASOURCE_SCHEMA: ${DATABASE_SCHEMA}
      GATEWAY_TRANSFER-AUTHORIZATION-GATEWAY-URL: ${TRANSFER_AUTHORIZATION_GATEWAY_URL}
      GATEWAY_TRANSFER-NOTIFICATION-GATEWAY-URL: ${SEND_TRANSFER_NOTIFICATION_GATEWAY_URL}
      SPRING_CLOUD_OPENFEIGN_CIRCUITBREAKER_ENABLED: true
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: INFO
      LOGGING_FILE_NAME: log/logging.log
      SPRING_KAFKA_BOOTSTRAP-SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      SPRING_KAFKA_PRODUCER_VALUE-SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_KAFKA_CONSUMER_VALUE-SERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      SPRING_FLYWAY_SCHEMAS: ${DATABASE_SCHEMA}
      SPRING_FLYWAY_DEFAULT-SCHEMA: ${DATABASE_SCHEMA}
      SPRING_FLYWAY_BASELINE-ON-MIGRATE: true
      SPRING_FLYWAY_BASELINE-VERSION: 0
      SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES: '*'
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pp-simple-network

networks:
  pp-simple-network:
    driver: bridge


volumes:
  postgres_data:
  kafka_data:
